#! /bin/sh
### BEGIN INIT INFO
# Provides:          jxcolld
# Required-Start:    $remote_fs $syslog $time $network
# Required-Stop:     $remote_fs $syslog $time $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: JXColl initscript
# Description:       This bash script takes care of starting, stoping and restarting JXColl.
#                    For more info please see man page jxcoll or visit our project page: http://www.wiki.cnl.tuke.sk/Monica/WebHome
### END INIT INFO

# Author: Adrian Pekar <adrian.pekar@gmail.com>

DESC="Java XML Collector (JXColl)"
NAME=jxcoll
NAME_ARG=jxcoll_config
PIDFILE=/var/run/$NAME.pid
JAVA=/usr/bin/java
DAEMON=/usr/lib/jxcoll/$NAME.jar
DAEMON_ARGS=/etc/jxcoll/$NAME_ARG.xml
DAEMON_SCRIPT="/usr/lib/jxcoll/jxcollrun.sh"

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that shows daemon/service usage
#
usage()
{
	echo ""
	echo "Usage: $0 <command>"
	echo ""
	echo "where <command> is one of the following:"
	echo "	start - start JXColl if it is not running"
	echo "	stop - stop JXColl if it is running"
	echo "	status - report whether JXColl is running"
	echo "	restart - stop and start JXColl"
	echo "	usage/help - print this message"
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --background --quiet --make-pidfile --pidfile $PIDFILE --test > /dev/null --exec $JAVA -- -jar $DAEMON $DAEMON_ARGS \
	|| return 0	
	start-stop-daemon --start --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON_SCRIPT -- $JAVA $DAEMON $DAEMON_ARGS --logtofile \
	|| return 2

##run.sh STOP ofajc:
#	start-stop-daemon --start --background --pidfile $PIDFILE --exec $DAEMON_SCRIPT -- $JAVA $DAEMON $DAEMON_ARGS $LOGFILE $PIDFILE \
#	|| return 2
##

##original:
#	start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --test > /dev/null --exec $JAVA -- -jar $DAEMON $DAEMON_ARGS \
#	|| return 0	
#	start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --exec $JAVA -- -jar $DAEMON $DAEMON_ARGS \
#	|| return 2											 
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred	

	start-stop-daemon --stop --quiet --oknodo --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2	
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2

	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC"

	if [ -e $PIDFILE ]; then
		log_end_msg 1
		echo " * JXColl was already running!"
	else
#		CURRENT_DATETIME=$(date '+%Y-%m-%d-%H-%M-%S')
#		touch /var/log/jxcoll/log-$CURRENT_DATETIME.log
#		LOGFILE=/var/log/jxcoll/log-$CURRENT_DATETIME.log

		do_start
		case "$?" in
			0|1) log_end_msg 0 ;;
			2) log_end_msg 1 ;;
		esac
	fi
	;;
  stop)
	log_daemon_msg "Stopping $DESC"

	if [ -e $PIDFILE ]; then
		exec < $PIDFILE
		read ppid
		pid=$(ps -o pid,ppid ax | grep $ppid | awk "{if (\$2 == $ppid) {print \$1}}")

		#print the PPID and PID:
		#for pid in `ps -Ao pid,ppid,command | grep $DAEMON | sed "s/^[ ]*//" | cut -d\  -f1` ; do echo $pid; done
	
		#	ppid=`expr $ppid + 1`
		#	echo "Parent: "$ppid	
		#	echo "Child : "$pid

		do_stop
		case "$?" in
			0|1) log_end_msg 0
			     kill -9 $pid ;;
			2) log_end_msg 1 ;;
		esac
	else
		log_end_msg 1
		echo " * JXColl was already stopped!"
	fi
	;;
  status)
	#takto nefuguje:\        
	#status_of_proc "$DAEMON" "$DESC" && exit 0 || exit $?

	if [ -e $PIDFILE ]; then
		log_success_msg "$DESC is running"	
	else
		log_failure_msg "$DESC is not running"
	fi
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC"

	if [ -e $PIDFILE ]; then
		exec < $PIDFILE
		read ppid
		pid=$(ps -o pid,ppid ax | grep $ppid | awk "{if (\$2 == $ppid) {print \$1}}")

		#print the PPID and PID:
		#for pid in `ps -Ao pid,ppid,command | grep $DAEMON | sed "s/^[ ]*//" | cut -d\  -f1` ; do echo $pid; done
	
		#	ppid=`expr $ppid + 1`
		#	echo "Parent: "$ppid	
		#	echo "Child : "$pid

		do_stop
		case "$?" in
		  0|1)
        		kill -9 $pid
#			CURRENT_DATETIME=$(date '+%Y-%m-%d-%H-%M-%S')
#			touch /var/log/jxcoll/log-$CURRENT_DATETIME.log
#			LOGFILE=/var/log/jxcoll/log-$CURRENT_DATETIME.log
			do_start
			case "$?" in
				0) log_end_msg 0 ;;
				1) log_end_msg 1 ;; # Old process is still running
				*) log_end_msg 1 ;; # Failed to start
			esac
			;;
		  *)
		  	# Failed to stop
			log_end_msg 1
			;;
		esac
	else
		log_end_msg 1
		echo " * There is no running JXColl process to restart!"
	fi
	;;
  usage|help)
	usage
	;;
  *)
	usage	
	exit 3
	;;
esac

:
